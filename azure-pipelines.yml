# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '709ff85a-d623-4d02-a684-6755d788791a'
  imageRepository: 'adventureworks/web'
  containerRegistry: 'jbens.azurecr.io'
  dockerfilePath: 'Adventureworks.Web/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'jbensa393-auth'
  dockerBuild: $(Build.SourcesDirectory)/Adventureworks
  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerBuild)/$(dockerfilePath)
        buildContext: $(dockerBuild)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          
    - upload: $(dockerBuild)/Adventureworks.Web/k8s/
      artifact: scripts

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Canary Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'Microservices.adventureworks'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              
          - task: KubernetesManifest@0
            displayName: Deploy to Canary To Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/k8s.deploy.yaml
                $(Pipeline.Workspace)/k8s.service.yaml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

